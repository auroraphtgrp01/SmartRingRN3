import { Device } from 'react-native-ble-plx';
import * as base64 from 'base64-js';
import { Alert } from 'react-native';
import {
  SERVICE_UUID,
  NOTIFY_UUID,
  DEVICE_INFO_DATATYPE,
  DEVICE_INFO_COMMAND,
  DEVICE_INFO_REQUEST_COMMAND
} from '../constants';

import {
  MeasurementParams,
  sendMeasurementCommand,
  setupBasicNotification,
  isCompletionNotification
} from './BaseMeasureService';

/**
 * G·ª≠i l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã
 * @param device - Thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi
 * @param logCallback - Callback ƒë·ªÉ ghi log
 * @returns - Th√†nh c√¥ng hay kh√¥ng
 */
export const sendDeviceInfoCommand = async (
  device: Device | null,
  logCallback: (message: string) => void
): Promise<boolean> => {
  if (!device) {
    logCallback(" Ch∆∞a k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã!");
    return false;
  }
  
  try {
    logCallback(" G·ª≠i l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã...");
    
    // S·ª≠ d·ª•ng l·ªánh ƒë√£ chu·∫©n b·ªã s·∫µn
    await device.writeCharacteristicWithResponseForService(
      SERVICE_UUID,
      NOTIFY_UUID,
      base64.fromByteArray(new Uint8Array(DEVICE_INFO_REQUEST_COMMAND))
    );
    
    logCallback(" ‚úÖ ƒê√£ g·ª≠i l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã");
    return true;
  } catch (error) {
    logCallback(` ‚ùå L·ªói khi g·ª≠i l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã: ${error}`);
    return false;
  }
};

/**
 * H√†m x·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã
 * @param data - D·ªØ li·ªáu tr·∫£ v·ªÅ d·∫°ng byte array
 * @param setDeviceInfo - Callback ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã
 * @param addLog - Callback ƒë·ªÉ ghi log
 */
export const handleDeviceInfoData = (
  data: number[], 
  setDeviceInfo: (info: any) => void,
  addLog: (message: string) => void
) => {
  const hexData = data.map(b => b.toString(16).padStart(2, '0')).join(' ');
  addLog(` üìä Nh·∫≠n d·ªØ li·ªáu thi·∫øt b·ªã: ${hexData}`);
  
  // Ki·ªÉm tra n·∫øu l√† th√¥ng b√°o k·∫øt th√∫c
  if (isCompletionNotification(data)) {
    addLog(" üîî Ph√°t hi·ªán g√≥i th√¥ng b√°o K·∫æT TH√öC qu√° tr√¨nh l·∫•y th√¥ng tin");
    return;
  }
  
  // Ph√¢n t√≠ch d·ªØ li·ªáu thi·∫øt b·ªã
  try {
    if (data.length > 5) {
      // ƒê·ªëi v·ªõi g√≥i d·ªØ li·ªáu device support function, 
      // c·∫•u tr√∫c d·ª± ki·∫øn: [header, type, length, ...data]
      const deviceInfo = {
        rawData: hexData,
        firmwareVersion: '',
        hardwareVersion: '',
        model: '',
        battery: 0,
        supportedFeatures: []
      };
      
      // Ph√¢n t√≠ch d·ªØ li·ªáu thi·∫øt b·ªã c·ª• th·ªÉ t√πy thu·ªôc v√†o ƒë·ªãnh d·∫°ng g√≥i tr·∫£ v·ªÅ
      // ƒê√¢y l√† ph·∫ßn c·∫ßn ƒëi·ªÅu ch·ªânh d·ª±a tr√™n ƒë·ªãnh d·∫°ng th·ª±c t·∫ø c·ªßa d·ªØ li·ªáu
      
      // N·∫øu g√≥i d·ªØ li·ªáu th·ªèa m√£n ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi c·ªßa l·ªánh getDeviceSupportFunction
      if (data[0] === 0x02 && data[1] === 0x01) {
        addLog(" üì± Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin thi·∫øt b·ªã");
        
        // Tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n (c·∫ßn ƒëi·ªÅu ch·ªânh theo ƒë·ªãnh d·∫°ng th·ª±c t·∫ø)
        if (data.length >= 10) {
          deviceInfo.battery = data[3]; // Gi·∫£ s·ª≠ byte th·ª© 4 l√† % pin
          
          // Tr√≠ch xu·∫•t c√°c t√≠nh nƒÉng ƒë∆∞·ª£c h·ªó tr·ª£
          // Gi·∫£ s·ª≠ t·ª´ byte th·ª© 5 tr·ªü ƒëi l√† c√°c c·ªù t√≠nh nƒÉng
          for (let i = 5; i < data.length; i++) {
            if (data[i] > 0) {
              deviceInfo.supportedFeatures.push(`Feature_${i - 5}: ${data[i]}`);
            }
          }
        }
      }
      
      setDeviceInfo(deviceInfo);
      addLog(` ‚úÖ ƒê√£ ph√¢n t√≠ch th√¥ng tin thi·∫øt b·ªã`);
    }
  } catch (error) {
    addLog(` ‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu thi·∫øt b·ªã: ${error}`);
  }
};

/**
 * L·∫•y th√¥ng tin thi·∫øt b·ªã
 * @param device - Thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi
 * @param notificationSubscription - Subscription hi·ªán t·∫°i
 * @param setNotificationSubscription - Callback ƒë·ªÉ c·∫≠p nh·∫≠t subscription
 * @param setDeviceInfo - Callback ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã
 * @param addLog - Callback ƒë·ªÉ ghi log
 */
export const getDeviceInfo = async (
  device: Device | null,
  notificationSubscription: any,
  setNotificationSubscription: (subscription: any) => void,
  setDeviceInfo: (info: any) => void,
  addLog: (message: string) => void
): Promise<boolean> => {
  if (!device) {
    addLog(" ‚ùå Kh√¥ng c√≥ thi·∫øt b·ªã k·∫øt n·ªëi");
    return false;
  }
  
  try {
    const isConnected = await device.isConnected();
    if (!isConnected) {
      addLog(" ‚ùå Thi·∫øt b·ªã ƒë√£ ng·∫Øt k·∫øt n·ªëi");
      return false;
    }
    
    // H·ªßy ƒëƒÉng k√Ω notification c≈© (n·∫øu c√≥)
    if (notificationSubscription) {
      try {
        addLog(" H·ªßy ƒëƒÉng k√Ω th√¥ng b√°o tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu l·∫•y th√¥ng tin...");
        if (typeof notificationSubscription.remove === 'function') {
          notificationSubscription.remove();
          addLog(" ‚úÖ ƒê√£ h·ªßy ƒëƒÉng k√Ω th√¥ng b√°o tr∆∞·ªõc ƒë√≥");
        } else {
          addLog(" ‚ö†Ô∏è L∆∞u √Ω: notificationSubscription.remove kh√¥ng ph·∫£i l√† h√†m");
        }
      } catch (error) {
        addLog(` ‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy th√¥ng b√°o c≈©: ${error}`);
      }
    }
    
    // Thi·∫øt l·∫≠p notification ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu
    const setupSuccess = await setupBasicNotification(
      device,
      (data: number[]) => handleDeviceInfoData(data, setDeviceInfo, addLog),
      setNotificationSubscription,
      addLog
    );
    
    if (!setupSuccess) {
      addLog(" ‚ùå Kh√¥ng th·ªÉ thi·∫øt l·∫≠p callback");
      return false;
    }
    
    // G·ª≠i l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã
    addLog(" G·ª≠i l·ªánh l·∫•y th√¥ng tin thi·∫øt b·ªã...");
    await sendDeviceInfoCommand(device, addLog);
    
    addLog(" ‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y th√¥ng tin thi·∫øt b·ªã");
    Alert.alert(
      "L·∫•y th√¥ng tin thi·∫øt b·ªã",
      "ƒêang l·∫•y th√¥ng tin t·ª´ SmartRing, vui l√≤ng ƒë·ª£i...",
      [{ text: "OK" }]
    );
    
    return true;
  } catch (error) {
    addLog(` ‚ùå L·ªói khi l·∫•y th√¥ng tin thi·∫øt b·ªã: ${error}`);
    return false;
  }
};